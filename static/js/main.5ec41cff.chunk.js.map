{"version":3,"sources":["reducer/count/index.js","reducer/login/index.js","reducer/todo/index.js","containers/home/index.js","logo.svg","containers/login/index.js","reducer/register/index.js","containers/register/index.js","App.js","reducer/index.js","store/configureStore.js","index.js"],"names":["counterSlice","createSlice","name","initialState","value","randomColor","reducers","increment","state","action","payload","decrement","changeColor","actions","loginSlice","email","password","isAuthenticated","loginAction","loginData","foundUser","userList","find","user","console","log","logout","toDoSlice","list","isLoading","error","addList","addList_SUCCESS","addList_FAIL","deleteSingleList","deleteSingleList_SUCCESS","filteredList","filter","item","key","deleteSingleList_FAIL","Home","useState","deleteKey","setDeleteKey","count","useSelector","counter","color","todo","todoList","inputRef","useRef","JSON","parse","localStorage","getItem","r","g","b","dispatch","useDispatch","navigate","useNavigate","className","style","backgroundColor","onClick","removeItem","colorArr","parseInt","Math","random","changeTheColor","type","id","placeholder","ref","el","data","title","Date","toISOString","setTimeout","alert","disabled","length","map","index","deleteSingleToDoList","Login","emailRef","passwordRef","registeredUsers","register","login","useEffect","setItem","stringify","src","logo","alt","height","width","to","htmlFor","submitLogin","registerSlice","Register","nameRef","submitRegister","App","basename","process","path","element","combineReducers","persistConfig","version","storage","persistedReducer","persistReducer","rootReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5ec41cff.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n    randomColor: [255, 255, 255],\n  },\n  reducers: {\n    increment: (state, action) => {\n      state.value += action.payload;\n    },\n    decrement: (state, action) => {\n      state.value -= action.payload;\n    },\n    changeColor: (state, action) => {\n      state.randomColor = action.payload;\n    }\n  },\n});\n\nexport const { increment, decrement, changeColor } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState: {\n    email: '',\n    password: '',\n    name: '',\n    isAuthenticated: false,\n  },\n  reducers: {\n    loginAction: (state, action) => {\n      state.email = action.payload.loginData.email;\n      state.password = action.payload.loginData.password;\n\n      const foundUser = action.payload.userList.find(user => user.email === state.email);\n      console.log(foundUser);\n      if (foundUser && foundUser.password === state.password) {\n        state.isAuthenticated = true;\n        state.name = foundUser.name;\n      }\n    },\n    logout: (state) => {\n      state.isAuthenticated = false;\n      state.name = '';\n      state.email = '';\n      state.password = '';\n    }\n  }\n});\n\nexport const { loginAction, logout } = loginSlice.actions;\n\nexport default loginSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const toDoSlice = createSlice({\n  name: 'to-do',\n  initialState: {\n    list: [],\n    isLoading: false,\n    error: null,\n  },\n  reducers: {\n    // addList: (state, action) => {\n    //   state.list = [...state.list, action.payload];\n    // }\n    addList: (state, action) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    addList_SUCCESS: (state, action) => {\n      state.isLoading = false;\n      state.error = null;\n      state.list = [...state.list, action.payload];\n    },\n    addList_FAIL: (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    },\n    deleteSingleList: (state, action) => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    deleteSingleList_SUCCESS: (state, action) => {\n      state.isLoading = false;\n      state.error = null;\n      const filteredList = state.list.filter(\n        (item) => item.key !== action.payload\n      );\n      state.list = filteredList;\n    },\n    deleteSingleList_FAIL: (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    },\n  },\n});\n\nexport const {\n  addList,\n  addList_FAIL,\n  addList_SUCCESS,\n  deleteSingleList,\n  deleteSingleList_FAIL,\n  deleteSingleList_SUCCESS,\n} = toDoSlice.actions;\n\nexport default toDoSlice.reducer;\n","import React, { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { decrement, increment, changeColor } from '../../reducer/count';\nimport { logout } from '../../reducer/login';\nimport {\n  addList,\n  addList_SUCCESS,\n  addList_FAIL,\n  deleteSingleList,\n  deleteSingleList_FAIL,\n  deleteSingleList_SUCCESS,\n} from '../../reducer/todo';\n\nconst Home = () => {\n  const [deleteKey, setDeleteKey] = useState('');\n  const count = useSelector((state) => state.counter.value);\n  const color = useSelector((state) => state.counter.randomColor);\n  const {\n    list: todoList,\n    isLoading,\n    error,\n  } = useSelector((state) => state.todo);\n  let inputRef = useRef();\n  const user = JSON.parse(localStorage.getItem('user'));\n  const [r, g, b] = color;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const changeTheColor = () => {\n    const colorArr = [\n      parseInt(Math.random() * 255),\n      parseInt(Math.random() * 255),\n      parseInt(Math.random() * 255),\n    ];\n    dispatch(changeColor(colorArr));\n  };\n\n  const addToDoList = () => {\n    if (!inputRef.value) {\n      alert('input cannot be empty');\n      return;\n    }\n\n    const data = {\n      title: inputRef.value,\n      key: new Date().toISOString(),\n    };\n\n    // dispatch(addList());\n    // inputRef.value = '';\n\n    try {\n      dispatch(addList());\n      inputRef.value = '';\n\n      setTimeout(() => {\n        dispatch(addList_SUCCESS(data));\n      }, 3000);\n    } catch (error) {\n      dispatch(addList_FAIL(error));\n    }\n  };\n\n  const deleteSingleToDoList = (key) => {\n    setDeleteKey(key);\n    try {\n      dispatch(deleteSingleList());\n      setTimeout(() => {\n        dispatch(deleteSingleList_SUCCESS(key));\n        setDeleteKey('');\n      }, 2000);\n    } catch (error) {\n      dispatch(deleteSingleList_FAIL(error));\n    }\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n    localStorage.removeItem('user');\n    navigate('/');\n  };\n\n  return (\n    <div\n      className='text-center flex flex-col items-center justify-start min-h-screen py-4'\n      style={{ backgroundColor: `rgb(${r}, ${g}, ${b})` }}\n    >\n      <h1>Hello, {user.name} </h1>\n      <button\n        onClick={handleLogout}\n        className='border-2 border-black p-2 m-4 w-20 rounded-md'\n      >\n        Logout\n      </button>\n      <h1>This Is Home</h1>\n      <h1>Count: {count}</h1>\n\n      <div className='space-x-4 w-full'>\n        <button\n          onClick={() => dispatch(increment(2))}\n          className='border-2 border-black p-2 m-4 w-20 rounded-md'\n        >\n          Add\n        </button>\n        <button\n          onClick={() => dispatch(decrement(4))}\n          className='border-2 border-black p-2 m-4 w-20 rounded-md'\n        >\n          Minus\n        </button>\n      </div>\n\n      <h1>Random Background Color</h1>\n      <div>\n        <button\n          onClick={() => changeTheColor()}\n          className='border-2 border-black p-2 m-4 rounded-md'\n        >\n          Change Color\n        </button>\n      </div>\n\n      <h1>My To-Do List</h1>\n      <div className='space-x-4 w-full mt-2'>\n        <input\n          type='text'\n          id='add-todo'\n          placeholder='Add A List'\n          className='border-2 border-black p-1 w-1/3 rounded-md text-center'\n          ref={(el) => (inputRef = el)}\n        />\n        <button\n          onClick={addToDoList}\n          className='border-2 border-black text-black p-1 m-4 w-20 rounded-md'\n          disabled={isLoading}\n        >\n          Add List\n        </button>\n      </div>\n\n      <div>{isLoading && !deleteKey && <p>Adding New List .....</p>}</div>\n\n      <div className='text-black h-80 overflow-scroll w-full flex justify-center items-start flex-wrap'>\n        {todoList.length ? (\n          todoList.map((item, index) => (\n            <div\n              key={item.key}\n              className='border-black border-2 p-4 m-2 rounded-md w-1/3'\n            >\n              <h3>\n                {index + 1}. {item.title}\n              </h3>\n              <p>{item.key}</p>\n              <div className='flex flex-col items-center w-full'>\n                <button\n                  onClick={() => deleteSingleToDoList(item.key)}\n                  className='border-2 border-black text-black p-1 m-4 w-20 rounded-md'\n                >\n                  Delete\n                </button>\n                {isLoading && deleteKey === item.key && <p>deleting...</p>}\n              </div>\n            </div>\n          ))\n        ) : (\n          <h3>Your List is currently Empty</h3>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useRef, useEffect } from 'react';\nimport logo from '../../logo.svg';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loginAction } from '../../reducer/login';\nimport { Link, useNavigate } from 'react-router-dom';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  let emailRef = useRef();\n  let passwordRef = useRef();\n  const registeredUsers = useSelector(\n    (state) => state.register.registeredUsers\n  );\n  const { email, name, isAuthenticated } = useSelector(\n    (state) => state.login\n  );\n\n  const submitLogin = () => {\n    if (!emailRef.value || !passwordRef.value) {\n      alert('Email and Password must be filled');\n      return;\n    }\n\n    const data = {\n      loginData: {\n        email: emailRef.value,\n        password: passwordRef.value,\n      },\n      userList: registeredUsers,\n    };\n\n    dispatch(loginAction(data));\n  };\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      localStorage.setItem('user', JSON.stringify({ email: email, name: name, isAuthenticated: isAuthenticated }));\n      navigate('/home');\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div className='min-h-screen min-w-full bg-gray-200'>\n      {/* Blur Background Image Div */}\n      <div></div>\n      {/* Login Card */}\n      <div className='min-h-screen flex flex-col items-center justify-start'>\n        <div className='flex flex-col items-center justify-center my-8'>\n          <img src={logo} alt='Logo' height={120} width={120} />\n          <h1 className='text-3xl font-semibold my-2'>\n            Sign in to your account\n          </h1>\n          <p>\n            Or{' '}\n            <Link to='/register'>\n              <span className='text-blue-400 hover:underline'>\n                you can register here\n              </span>\n            </Link>\n          </p>\n        </div>\n        {/* The input card */}\n        <div className='flex flex-col items-center justify-center my-2 w-1/2 rounded-lg shadow-lg p-8 bg-gray-200'>\n          <div className='flex flex-col items-start justify-center my-2 w-full px-6'>\n            <label className='text-gray-700' htmlFor='email'>\n              Email Address\n            </label>\n            <input\n              className='w-full p-2 text-center rounded-md my-4 shadow-md bg-gray-100'\n              type='email'\n              id='email'\n              placeholder='Enter your email'\n              ref={(el) => (emailRef = el)}\n            />\n          </div>\n          <div className='flex flex-col items-start justify-center my-2 w-full px-6'>\n            <label className='text-gray-700' htmlFor='password'>\n              Password\n            </label>\n            <input\n              className='w-full p-2 text-center rounded-md my-4 shadow-md bg-gray-100'\n              type='password'\n              id='password'\n              placeholder='Enter your password'\n              ref={(el) => (passwordRef = el)}\n            />\n          </div>\n          <div className='flex items-center justify-between w-full px-6 my-2'>\n            <div>\n              <input\n                className='mx-2'\n                type='checkbox'\n                name='remember-me'\n                id='remember-me'\n              />\n              <label className='text-gray-700' htmlFor='remember-me'>\n                Remember Me\n              </label>\n            </div>\n            <p className='text-blue-700'>Forget your password?</p>\n          </div>\n          <div className='flex items-center justify-center w-full px-6 my-4'>\n            <button\n              onClick={() => submitLogin()}\n              className='p-2 rounded-md bg-indigo-800 text-indigo-50 w-full'\n            >\n              Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const registerSlice = createSlice({\n  name: 'register',\n  initialState: {\n    registeredUsers: [],\n  },\n  reducers: {\n    register: (state, action) => {\n      if (\n        !state.registeredUsers.find(\n          (user) => user.email === action.payload.email\n        )\n      ) {\n        state.registeredUsers = [\n          ...state.registeredUsers,\n          {\n            email: action.payload.email,\n            name: action.payload.name,\n            password: action.payload.password,\n          },\n        ];\n      }\n    },\n  },\n});\n\nexport const { register } = registerSlice.actions;\n\nexport default registerSlice.reducer;\n","import React, { useRef, useEffect } from 'react';\nimport logo from '../../logo.svg';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { register } from '../../reducer/register';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n  let emailRef = useRef();\n  let passwordRef = useRef();\n  let nameRef = useRef();\n  const registeredUsers = useSelector((state) => state.register.registeredUsers);\n\n  const submitRegister = () => {\n    if (!emailRef.value || !passwordRef.value || !nameRef.value) {\n      alert('All fields must be filled');\n      return;\n    }\n\n    const data = {\n      email: emailRef.value,\n      password: passwordRef.value,\n      name: nameRef.value\n    };\n\n    dispatch(register(data));\n    emailRef.value = '';\n    passwordRef.value = '';\n    nameRef.value = '';\n\n  };\n\n  useEffect(() => {\n    alert('New users successfully created');\n  }, [registeredUsers])\n\n  return (\n    <div className='min-h-screen min-w-full bg-gray-200'>\n      {/* Blur Background Image Div */}\n      <div></div>\n      {/* Login Card */}\n      <div className='min-h-screen flex flex-col items-center justify-start'>\n        <div className='flex flex-col items-center justify-center my-8'>\n          <img src={logo} alt='Logo' height={120} width={120} />\n          <h1 className='text-3xl font-semibold my-2'>Sign up!</h1>\n          <p>\n            Or{' '}\n            <Link to='/'>\n              <span className='text-blue-400 hover:underline'>click here to login</span>\n            </Link>\n          </p>\n        </div>\n        {/* The input card */}\n        <div className='flex flex-col items-center justify-center my-2 w-1/2 rounded-lg shadow-lg p-8 bg-gray-200'>\n          <div className='flex flex-col items-start justify-center my-2 w-full px-6'>\n            <label className='text-gray-700' htmlFor='email'>\n              Email Address\n            </label>\n            <input\n              className='w-full p-2 text-center rounded-md my-4 shadow-md bg-gray-100'\n              type='email'\n              id='email'\n              placeholder='Enter your email'\n              ref={(el) => (emailRef = el)}\n            />\n          </div>\n          <div className='flex flex-col items-start justify-center my-2 w-full px-6'>\n            <label className='text-gray-700' htmlFor='name'>\n              Name\n            </label>\n            <input\n              className='w-full p-2 text-center rounded-md my-4 shadow-md bg-gray-100'\n              type='text'\n              id='name'\n              placeholder='Enter your name'\n              ref={(el) => (nameRef = el)}\n            />\n          </div>\n          <div className='flex flex-col items-start justify-center my-2 w-full px-6'>\n            <label className='text-gray-700' htmlFor='password'>\n              Password\n            </label>\n            <input\n              className='w-full p-2 text-center rounded-md my-4 shadow-md bg-gray-100'\n              type='password'\n              id='password'\n              placeholder='Enter your password'\n              ref={(el) => (passwordRef = el)}\n            />\n          </div>\n          <div className='flex items-center justify-center w-full px-6 my-4'>\n            <button\n              onClick={() => submitRegister()}\n              className='p-2 rounded-md bg-indigo-800 text-indigo-50 w-full'\n            >\n              Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","import './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Home from './containers/home';\nimport Login from './containers/login';\nimport Register from './containers/register';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Routes>\n          <Route index path='/' element={<Login />} />\n          <Route path='/register' element={<Register />} />\n          <Route path='/home' element={<Home />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// Root reducer\nimport { combineReducers } from \"redux\";\nimport todo from \"./todo\";\nimport counter from \"./count\";\nimport login from './login';\nimport register from \"./register\";\n\nexport default combineReducers({\n  todo,\n  counter,\n  login,\n  register\n})","//day 7\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from '../reducer';\n\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nlet persistor = persistStore(store);\n\nexport { store, persistor };\n// export default configureStore({\n//   reducer: {\n//     counter: counter,\n//     todo: todo,\n//   },\n// });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import store from './store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './store/configureStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}